name: Build app

on:
  workflow_call:
    inputs:
      android:
        required: false
        type: string
        description: 'If the android platform should be built'
      ios:
        required: false
        type: string
        description: 'If the iOS platform should be built'
      test:
        required: false
        type: string
        description: 'If a test build should be distributed'
      release:
        required: false
        type: string
        description: 'If a production release should be published'
      runs-on:
        required: true
        type: string
        description: 'On which machine to run the build'
      npm-scope:
        required: true
        type: 'string'
        description: 'Which npm scope to use for the private npm registry'
      java-version:
        required: true
        type: string
        description: 'Which java version should be used'
    secrets:
      BUILD_BOT_SSH_KEY:
        required: true
      APP_CENTER_API_TOKEN:
        required: false
      MS_TEAMS_WEBHOOK_URL:
        required: true
      APP_STORE_CONNECT_API_KEY_KEY:
        required: false
      MATCH_PASSWORD:
        required: false
      HUAWEI_APP_GALLERY_API_KEY:
        required: false
      ANDROID_KEYSTORE_PASSWORD:
        required: false
      SENTRY_AUTH_TOKEN:
        required: false
      PLAY_CONSOLE_ACCESS_JSON:
        required: false

jobs:
  map_inputs:
    name: Map workflow inputs
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Map inputs
        id: map-inputs
        uses: ventocom/app-workflows/.github/actions/map-inputs@main
        with:
          android: ${{ fromJSON(inputs.android) }}
          ios: ${{ fromJSON(inputs.ios) }}
          test: ${{ fromJSON(inputs.test) }}
          release: ${{ fromJSON(inputs.release) }}
    # Map step output to job output
    outputs:
      platforms: ${{ steps.map-inputs.outputs.platforms }}
      types: ${{ steps.map-inputs.outputs.types }}

  prepare_and_build_environment:
    name: ${{ matrix.platform }} ${{ matrix.type.type }} app
    needs: map_inputs
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.map_inputs.outputs.platforms) }}
        type: ${{ fromJSON(needs.map_inputs.outputs.types) }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          ssh-key: ${{ secrets.BUILD_BOT_SSH_KEY }}
          ssh-strict: 'accept-new'
          lfs: true

      # https://github.com/actions/checkout/issues/165
      - name: Create LFS lock file
        run: |
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
          git add .lfs-assets-id
          git commit -m "update git lfs lockfile" || true
          git config pull.rebase false
          git pull
          git push

      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

      # https://github.com/actions/checkout/issues/270
      - name: Git LFS Pull
        run: git lfs pull

      - name: Cache ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java-version }}

      - name: Install ruby gems
        run: |
          if [[ -s "/usr/local/opt/chruby/share/chruby/chruby.sh" ]]; then
            source "/usr/local/opt/chruby/share/chruby/chruby.sh"
          fi
          arch -arm64 bash -c '
            chruby $(cat .ruby-version) && \
            echo "Using Ruby version $(ruby -v)" && \
            bundle config path vendor/bundle && \
            bundle install --jobs 4 --retry 3 --quiet
          '

      - name: Configure private npm registry
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: '21.x'
          registry-url: https://npm.pkg.github.com
          scope: ${{ inputs.npm-scope }}

      - name: Install node modules
        env:
          IONIC_CLI_VERSION: '7.2.0'
        run: |
          arch -arm64 npm ci -q
          arch -arm64 npm i -g -q @ionic/cli@${IONIC_CLI_VERSION}

      - name: Setup play store authentication
        env:
          PLAY_CONSOLE_ACCESS_JSON: ${{ secrets.PLAY_CONSOLE_ACCESS_JSON }}
        if: ${{ matrix.platform == 'android' && matrix.type.type == 'release' }}
        run: |
          arch -arm64 echo "$PLAY_CONSOLE_ACCESS_JSON" > play-console-access.json.b64
          arch -arm64 base64 -d -i play-console-access.json.b64 > play-console-access.json

      - name: Run fastlane
        env:
          APP_CENTER_API_TOKEN: ${{ secrets.APP_CENTER_API_TOKEN }}
          MS_TEAMS_WEBHOOK_URL: ${{ secrets.MS_TEAMS_WEBHOOK_URL }}
          APP_STORE_CONNECT_API_KEY_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          HUAWEI_APP_GALLERY_API_KEY: ${{ secrets.HUAWEI_APP_GALLERY_API_KEY }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          LANG: 'en_US.UTF-8'
          LC_ALL: 'en_US.UTF-8'
        run: arch -arm64 bundle exec fastlane ${{ matrix.platform }} ${{ matrix.type.lane }}
